import os
import time

from aiogram.types import (
    KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from dotenv import load_dotenv
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import psycopg2 as ps
from aiogram.utils.markdown import hbold, hlink

from config import DATABASE_URI
from scrap_data.scrap_main import ScrapDataProduct

load_dotenv()

base = ps.connect(DATABASE_URI)
base.autocommit = True
cur = base.cursor()

bot = Bot(token=os.getenv('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

PRODUCT_LINC = ''
NAME_PRODUCT_DELETE = ''
NAME_PRODUCT_PRICE = ''


async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω...')


async def on_shutdown(_):
    print('–ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î')
    cur.close()
    base.close()


b1 = KeyboardButton('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤')
b2 = KeyboardButton('–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
b3 = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
b4 = KeyboardButton('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä')

kb_client = ReplyKeyboardMarkup(resize_keyboard=True)

kb_client.row(b1, b2).add(b3).add(b4)


@dp.message_handler(commands=['start', 'help'])
async def command_start(message: types.Message):
    await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å {message.from_user.first_name}! '
                         f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.'
                         f'–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é ‚¨á',
                         reply_markup=kb_client,
                         )


price_product = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(
    text='–î–∞, –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞', callback_data='get_price'))


@dp.message_handler(
    lambda message: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä' in message.text)
async def delete_product(message: types.Message):
    """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä."""
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç: –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)')


@dp.message_handler(lambda message: '–∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω' in message.text.lower())
async def delete_product(message: types.Message):
    """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä."""
    global NAME_PRODUCT_PRICE
    NAME_PRODUCT_PRICE = message.text[11:].strip()
    await message.answer(
        f'–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞? {NAME_PRODUCT_PRICE}',
        reply_markup=price_product,
    )


@dp.callback_query_handler(text='get_price')
async def get_price_product(callback: types.CallbackQuery):
    """–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä."""
    await callback.answer('–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä')
    exists_query = """SELECT EXISTS (SELECT products.name FROM products WHERE name = %s)"""
    cur.execute(exists_query, (NAME_PRODUCT_PRICE,))
    if not cur.fetchone()[0]:
        await callback.message.answer(
            '‚ùå–¢–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –µ—â—ë –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä')
    else:
        cur.execute(
            f"""select prices.price, prices.price_at from products join prices on products.id = prices.product_id where products.name = '{NAME_PRODUCT_PRICE}'""")
        for index, product in enumerate(cur):
            times = product[1].strftime('%Y.%d.%m %H:%M')
            card = f'{hbold("–¢–æ–≤–∞—Ä: ")} {NAME_PRODUCT_PRICE}\n' \
                   f'{hbold("–¶–µ–Ω–∞: ")} {product[0]}üî•\n' \
                   f'{hbold("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")} {times}\n'

            #  –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–∞ –∑–∞ —Ñ–ª—É–¥.
            if index % 20 == 0:
                time.sleep(3)

            await callback.message.answer(card)


@dp.message_handler(
    lambda message: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤' in message.text)
async def all_product(message: types.Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ."""
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚åõ...')
    cur.execute(
        """SELECT * FROM products"""
    )
    for index, product in enumerate(cur):
        linc = hlink(product[2], product[1])
        card = f'{hbold("–°—Å—ã–ª–∫–∞: ")} {linc}\n' \
               f'{hbold("–†–µ–π—Ç–∏–Ω–≥: ")} {product[4]}üî•\n' \
               f'{hbold("–ù–∞–∑–≤–∞–Ω–∏–µ: ")} {product[2]}\n' \
               f'{hbold("–û–ø–∏—Å–∞–Ω–∏–µ: ")} {product[3]}\n'

        #  –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–∞ –∑–∞ —Ñ–ª—É–¥.
        if index % 20 == 0:
            time.sleep(3)

        await message.answer(card)


del_product_inline = InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton(
    text='–î–∞, —É–¥–∞–ª–∏—Ç—å —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞', callback_data='delet'))


@dp.message_handler(lambda message: '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞' in message.text)
async def delete_product(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç:'
                         ' —É–¥–∞–ª–∏—Ç—å (–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏)')


@dp.message_handler(lambda message: '—É–¥–∞–ª–∏—Ç—å' in message.text.lower())
async def delete_product(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    global NAME_PRODUCT_DELETE
    NAME_PRODUCT_DELETE = message.text[7:].strip()
    await message.answer(
        f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä? {message.text[7:]}',
        reply_markup=del_product_inline,
    )


@dp.callback_query_handler(text='delet')
async def www_pars(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    await callback.answer('–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?', show_alert=True)
    cur.execute("DELETE FROM products WHERE name = %s",
                (NAME_PRODUCT_DELETE,))
    await callback.message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω üóë')


add_products_inline = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', callback_data='scrap'))


@dp.message_handler(
    lambda message: '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' in message.text)
async def delete_product(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç: —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å —Å–∞–π—Ç–∞ –ú.–≤–∏–¥–µ–æ')


@dp.message_handler(
    lambda message: 'https://www.mvideo.ru/products/' in message.text)
async def www_par(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
    global PRODUCT_LINC
    PRODUCT_LINC = message.text
    await message.answer(
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä? ',
        reply_markup=add_products_inline,
    )


@dp.callback_query_handler(text='scrap')
async def www_pars(callback: types.CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."""
    await callback.answer('–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?', show_alert=True)
    product = ScrapDataProduct(PRODUCT_LINC).scrap()
    linc = str(PRODUCT_LINC)
    name = product['name']
    description = product['description']
    rating = product['rating']
    exists_query = """SELECT EXISTS (SELECT products.url FROM products WHERE url = %s)"""
    cur.execute(exists_query, (linc,))
    if cur.fetchone()[0]:
        await callback.message.answer('‚ùå–¢–æ–≤–∞—Ä —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ')
    else:
        cur.execute(
            """INSERT INTO products (url, name, description, rating) VALUES (%s, %s, %s, %s);""",
            (linc, name, description, rating))
        await callback.message.answer('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')


@dp.message_handler()
async def echo_send(message: types.Message):
    """–≠—Ö–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
    await message.reply(
        '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—á—Ç–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∫–∞–∫–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–≤—Ç—Ä–∏—Ç–µ'
        ' –ø–æ–ø—ã—Ç–∫—É...')


def main():
    executor.start_polling(dp, skip_updates=True,
                           on_startup=on_startup,
                           on_shutdown=on_shutdown,
                           )


if __name__ == '__main__':
    main()
